"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoRepository = void 0;
const base_repository_1 = require("./base-repository");
const video_metadata_1 = require("../models/video-metadata");
class VideoRepository extends base_repository_1.BaseRepository {
    constructor(config = {}) {
        super(process.env.VIDEO_METADATA_TABLE_NAME || 'VideoMetadata', config);
    }
    async saveVideo(video) {
        const item = video_metadata_1.VideoMetadataModel.toDynamoDbItem(video);
        await this.put({
            Item: item,
            ConditionExpression: 'attribute_not_exists(videoId)'
        });
    }
    async getVideo(videoId) {
        const item = await this.get({
            Key: { videoId }
        });
        return item ? video_metadata_1.VideoMetadataModel.fromDynamoDbItem(item) : null;
    }
    async updateVideo(video) {
        const item = video_metadata_1.VideoMetadataModel.toDynamoDbItem(video);
        const updatedItem = await this.update({
            Key: { videoId: video.videoId },
            UpdateExpression: `
        SET title = :title,
            description = :description,
            tags = :tags,
            categoryId = :categoryId,
            privacyStatus = :privacyStatus,
            viewCount = :viewCount,
            likeCount = :likeCount,
            commentCount = :commentCount,
            revenue = :revenue,
            sourceTrends = :sourceTrends,
            generationCost = :generationCost,
            processingCost = :processingCost,
            s3Key = :s3Key,
            bedrockJobId = :bedrockJobId,
            mediaConvertJobId = :mediaConvertJobId,
            #status = :status,
            performanceMetrics = :performanceMetrics,
            updatedAt = :updatedAt
      `,
            ExpressionAttributeNames: {
                '#status': 'status'
            },
            ExpressionAttributeValues: {
                ':title': item.title,
                ':description': item.description,
                ':tags': item.tags,
                ':categoryId': item.categoryId,
                ':privacyStatus': item.privacyStatus,
                ':viewCount': item.viewCount,
                ':likeCount': item.likeCount,
                ':commentCount': item.commentCount,
                ':revenue': item.revenue,
                ':sourceTrends': item.sourceTrends,
                ':generationCost': item.generationCost,
                ':processingCost': item.processingCost,
                ':s3Key': item.s3Key,
                ':bedrockJobId': item.bedrockJobId,
                ':mediaConvertJobId': item.mediaConvertJobId,
                ':status': item.status,
                ':performanceMetrics': item.performanceMetrics,
                ':updatedAt': item.updatedAt
            },
            ReturnValues: 'ALL_NEW'
        });
        return video_metadata_1.VideoMetadataModel.fromDynamoDbItem(updatedItem);
    }
    async updateVideoStatus(videoId, status) {
        const updatedItem = await this.update({
            Key: { videoId },
            UpdateExpression: 'SET #status = :status, updatedAt = :updatedAt',
            ExpressionAttributeNames: {
                '#status': 'status'
            },
            ExpressionAttributeValues: {
                ':status': status,
                ':updatedAt': new Date().toISOString()
            },
            ReturnValues: 'ALL_NEW'
        });
        return video_metadata_1.VideoMetadataModel.fromDynamoDbItem(updatedItem);
    }
    async updateYouTubeData(videoId, youtubeId, viewCount = 0, likeCount = 0, commentCount = 0) {
        const updatedItem = await this.update({
            Key: { videoId },
            UpdateExpression: `
        SET youtubeId = :youtubeId,
            viewCount = :viewCount,
            likeCount = :likeCount,
            commentCount = :commentCount,
            #status = :status,
            updatedAt = :updatedAt
      `,
            ExpressionAttributeNames: {
                '#status': 'status'
            },
            ExpressionAttributeValues: {
                ':youtubeId': youtubeId,
                ':viewCount': viewCount,
                ':likeCount': likeCount,
                ':commentCount': commentCount,
                ':status': video_metadata_1.VideoStatus.PUBLISHED,
                ':updatedAt': new Date().toISOString()
            },
            ReturnValues: 'ALL_NEW'
        });
        return video_metadata_1.VideoMetadataModel.fromDynamoDbItem(updatedItem);
    }
    async updatePerformanceMetrics(videoId, metrics) {
        const existingVideo = await this.getVideo(videoId);
        if (!existingVideo) {
            throw new Error(`Video with ID ${videoId} not found`);
        }
        const updatedMetrics = {
            ...existingVideo.performanceMetrics,
            ...metrics
        };
        const updatedItem = await this.update({
            Key: { videoId },
            UpdateExpression: 'SET performanceMetrics = :metrics, updatedAt = :updatedAt',
            ExpressionAttributeValues: {
                ':metrics': updatedMetrics,
                ':updatedAt': new Date().toISOString()
            },
            ReturnValues: 'ALL_NEW'
        });
        return video_metadata_1.VideoMetadataModel.fromDynamoDbItem(updatedItem);
    }
    async getVideosByStatus(status, limit = 50) {
        const items = await this.scan({
            FilterExpression: '#status = :status',
            ExpressionAttributeNames: {
                '#status': 'status'
            },
            ExpressionAttributeValues: {
                ':status': status
            },
            Limit: limit
        });
        return items.map(item => video_metadata_1.VideoMetadataModel.fromDynamoDbItem(item));
    }
    async getVideosByDateRange(startDate, endDate, options = {}) {
        let filterExpression = 'uploadDate BETWEEN :startDate AND :endDate';
        const expressionAttributeValues = {
            ':startDate': startDate,
            ':endDate': endDate
        };
        if (options.status) {
            filterExpression += ' AND #status = :status';
            expressionAttributeValues[':status'] = options.status;
        }
        // Use scan instead of query since we need to filter by date range
        // and the GSI only has uploadDate as partition key
        const items = await this.scan({
            FilterExpression: filterExpression,
            ExpressionAttributeNames: options.status ? { '#status': 'status' } : undefined,
            ExpressionAttributeValues: expressionAttributeValues,
            Limit: options.limit
        });
        // Sort by upload date descending (most recent first)
        const sortedItems = items.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime());
        return sortedItems.map(item => video_metadata_1.VideoMetadataModel.fromDynamoDbItem(item));
    }
    async getRecentVideos(days = 7, limit = 50) {
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000)
            .toISOString()
            .split('T')[0];
        const endDate = new Date().toISOString().split('T')[0];
        return this.getVideosByDateRange(startDate, endDate, { limit });
    }
    async getTopPerformingVideos(days = 30, limit = 10) {
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000)
            .toISOString()
            .split('T')[0];
        const endDate = new Date().toISOString().split('T')[0];
        const videos = await this.getVideosByDateRange(startDate, endDate);
        return videos
            .filter(video => video.status === video_metadata_1.VideoStatus.PUBLISHED)
            .sort((a, b) => {
            // Sort by engagement rate, then by view count
            const aEngagement = (a.likeCount + a.commentCount) / Math.max(a.viewCount, 1);
            const bEngagement = (b.likeCount + b.commentCount) / Math.max(b.viewCount, 1);
            if (aEngagement !== bEngagement) {
                return bEngagement - aEngagement;
            }
            return b.viewCount - a.viewCount;
        })
            .slice(0, limit);
    }
    async getVideoAnalytics(days = 30) {
        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000)
            .toISOString()
            .split('T')[0];
        const endDate = new Date().toISOString().split('T')[0];
        const videos = await this.getVideosByDateRange(startDate, endDate);
        const statusBreakdown = Object.values(video_metadata_1.VideoStatus).reduce((acc, status) => {
            acc[status] = 0;
            return acc;
        }, {});
        let totalViews = 0;
        let totalRevenue = 0;
        let totalCosts = 0;
        let totalROI = 0;
        let publishedVideos = 0;
        videos.forEach(video => {
            statusBreakdown[video.status]++;
            if (video.status === video_metadata_1.VideoStatus.PUBLISHED) {
                publishedVideos++;
                totalViews += video.viewCount;
                totalRevenue += video.revenue;
            }
            totalCosts += video.generationCost + video.processingCost;
            totalROI += video_metadata_1.VideoMetadataModel.calculateROI(video);
        });
        return {
            totalVideos: videos.length,
            publishedVideos,
            totalViews,
            totalRevenue,
            averageROI: videos.length > 0 ? totalROI / videos.length : 0,
            totalCosts,
            statusBreakdown
        };
    }
    async deleteVideo(videoId) {
        await this.delete({
            Key: { videoId }
        });
    }
    async getVideosBySourceTrend(trendTopic, limit = 20) {
        const items = await this.scan({
            FilterExpression: 'contains(sourceTrends, :trendTopic)',
            ExpressionAttributeValues: {
                ':trendTopic': trendTopic
            },
            Limit: limit
        });
        return items.map(item => video_metadata_1.VideoMetadataModel.fromDynamoDbItem(item));
    }
    async updateCosts(videoId, generationCost, processingCost) {
        const updateExpressions = [];
        const expressionAttributeValues = {
            ':updatedAt': new Date().toISOString()
        };
        if (generationCost !== undefined) {
            updateExpressions.push('generationCost = :generationCost');
            expressionAttributeValues[':generationCost'] = generationCost;
        }
        if (processingCost !== undefined) {
            updateExpressions.push('processingCost = :processingCost');
            expressionAttributeValues[':processingCost'] = processingCost;
        }
        updateExpressions.push('updatedAt = :updatedAt');
        const updatedItem = await this.update({
            Key: { videoId },
            UpdateExpression: `SET ${updateExpressions.join(', ')}`,
            ExpressionAttributeValues: expressionAttributeValues,
            ReturnValues: 'ALL_NEW'
        });
        return video_metadata_1.VideoMetadataModel.fromDynamoDbItem(updatedItem);
    }
}
exports.VideoRepository = VideoRepository;
//# sourceMappingURL=data:application/json;base64,