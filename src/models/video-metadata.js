"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoMetadataModel = exports.VideoStatus = void 0;
var VideoStatus;
(function (VideoStatus) {
    VideoStatus["GENERATING"] = "GENERATING";
    VideoStatus["PROCESSING"] = "PROCESSING";
    VideoStatus["UPLOADING"] = "UPLOADING";
    VideoStatus["PUBLISHED"] = "PUBLISHED";
    VideoStatus["FAILED"] = "FAILED";
})(VideoStatus || (exports.VideoStatus = VideoStatus = {}));
class VideoMetadataModel {
    static create(title, description, tags, sourceTrends, s3Key) {
        const videoId = this.generateVideoId();
        const now = new Date().toISOString();
        return {
            videoId,
            uploadDate: now.split('T')[0],
            title,
            description,
            tags,
            categoryId: '22',
            privacyStatus: 'public',
            viewCount: 0,
            likeCount: 0,
            commentCount: 0,
            revenue: 0,
            sourceTrends,
            generationCost: 0,
            processingCost: 0,
            s3Key,
            status: VideoStatus.GENERATING,
            performanceMetrics: {},
            createdAt: now,
            updatedAt: now
        };
    }
    static generateVideoId() {
        return `video_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    static updateStatus(video, status) {
        return {
            ...video,
            status,
            updatedAt: new Date().toISOString()
        };
    }
    static updateYouTubeData(video, youtubeId, viewCount = 0, likeCount = 0, commentCount = 0) {
        return {
            ...video,
            youtubeId,
            viewCount,
            likeCount,
            commentCount,
            status: VideoStatus.PUBLISHED,
            updatedAt: new Date().toISOString()
        };
    }
    static updatePerformanceMetrics(video, metrics) {
        return {
            ...video,
            performanceMetrics: {
                ...video.performanceMetrics,
                ...metrics
            },
            updatedAt: new Date().toISOString()
        };
    }
    static calculateROI(video) {
        const totalCost = video.generationCost + video.processingCost;
        if (totalCost === 0)
            return 0;
        return (video.revenue - totalCost) / totalCost;
    }
    static toDynamoDbItem(video) {
        return {
            videoId: video.videoId,
            youtubeId: video.youtubeId,
            uploadDate: video.uploadDate,
            title: video.title,
            description: video.description,
            tags: video.tags,
            categoryId: video.categoryId,
            privacyStatus: video.privacyStatus,
            viewCount: video.viewCount,
            likeCount: video.likeCount,
            commentCount: video.commentCount,
            revenue: video.revenue,
            sourceTrends: video.sourceTrends,
            generationCost: video.generationCost,
            processingCost: video.processingCost,
            s3Key: video.s3Key,
            bedrockJobId: video.bedrockJobId,
            mediaConvertJobId: video.mediaConvertJobId,
            status: video.status,
            performanceMetrics: video.performanceMetrics,
            createdAt: video.createdAt,
            updatedAt: video.updatedAt
        };
    }
    static fromDynamoDbItem(item) {
        return {
            videoId: item.videoId,
            youtubeId: item.youtubeId,
            uploadDate: item.uploadDate,
            title: item.title,
            description: item.description,
            tags: item.tags || [],
            categoryId: item.categoryId,
            privacyStatus: item.privacyStatus || 'public',
            viewCount: item.viewCount || 0,
            likeCount: item.likeCount || 0,
            commentCount: item.commentCount || 0,
            revenue: item.revenue || 0,
            sourceTrends: item.sourceTrends || [],
            generationCost: item.generationCost || 0,
            processingCost: item.processingCost || 0,
            s3Key: item.s3Key,
            bedrockJobId: item.bedrockJobId,
            mediaConvertJobId: item.mediaConvertJobId,
            status: item.status || VideoStatus.GENERATING,
            performanceMetrics: item.performanceMetrics || {},
            createdAt: item.createdAt,
            updatedAt: item.updatedAt
        };
    }
}
exports.VideoMetadataModel = VideoMetadataModel;
//# sourceMappingURL=data:application/json;base64,