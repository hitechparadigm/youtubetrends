"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTubeApiClientSimple = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const node_fetch_1 = require("node-fetch");
class YouTubeApiClientSimple {
    constructor(region = 'us-east-1') {
        this.credentials = null;
        this.quotaUsed = 0;
        this.secretsClient = new client_secrets_manager_1.SecretsManagerClient({ region });
    }
    async initialize() {
        await this.loadCredentials();
    }
    async loadCredentials() {
        try {
            const command = new client_secrets_manager_1.GetSecretValueCommand({
                SecretId: 'youtube-automation/credentials'
            });
            const response = await this.secretsClient.send(command);
            if (!response.SecretString) {
                throw new Error('No secret string found');
            }
            this.credentials = JSON.parse(response.SecretString);
            console.log('‚úÖ YouTube credentials loaded successfully');
        }
        catch (error) {
            throw new Error(`Failed to load YouTube credentials: ${error}`);
        }
    }
    async makeRequest(url) {
        if (!this.credentials?.api_key) {
            throw new Error('API key not available');
        }
        const separator = url.includes('?') ? '&' : '?';
        const requestUrl = `${url}${separator}key=${this.credentials.api_key}`;
        console.log('üåê Making YouTube API request...');
        const response = await (0, node_fetch_1.default)(requestUrl, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`YouTube API error: ${response.status} ${response.statusText} - ${errorText}`);
        }
        this.quotaUsed += 1; // Simple quota tracking
        return await response.json();
    }
    async searchVideos(query, maxResults = 25) {
        const params = new URLSearchParams({
            part: 'snippet',
            q: query,
            type: 'video',
            maxResults: maxResults.toString(),
            order: 'relevance'
        });
        const url = `https://www.googleapis.com/youtube/v3/search?${params}`;
        const response = await this.makeRequest(url);
        return response.items?.map((item) => ({
            videoId: item.id.videoId,
            title: item.snippet.title,
            description: item.snippet.description,
            channelTitle: item.snippet.channelTitle,
            channelId: item.snippet.channelId,
            publishedAt: item.snippet.publishedAt,
            thumbnails: item.snippet.thumbnails,
            categoryId: item.snippet.categoryId
        })) || [];
    }
    async getVideoDetails(videoIds) {
        const params = new URLSearchParams({
            part: 'snippet,statistics',
            id: videoIds.join(',')
        });
        const url = `https://www.googleapis.com/youtube/v3/videos?${params}`;
        const response = await this.makeRequest(url);
        return response.items?.map((item) => ({
            id: item.id,
            title: item.snippet.title,
            description: item.snippet.description,
            channelTitle: item.snippet.channelTitle,
            channelId: item.snippet.channelId,
            publishedAt: item.snippet.publishedAt,
            categoryId: item.snippet.categoryId,
            duration: item.contentDetails?.duration || 'PT0S',
            viewCount: parseInt(item.statistics?.viewCount || '0'),
            likeCount: parseInt(item.statistics?.likeCount || '0'),
            commentCount: parseInt(item.statistics?.commentCount || '0'),
            thumbnails: item.snippet.thumbnails
        })) || [];
    }
    async getTrendingVideos(categoryId, regionCode = 'US') {
        const params = new URLSearchParams({
            part: 'snippet,statistics',
            chart: 'mostPopular',
            regionCode,
            maxResults: '25'
        });
        if (categoryId) {
            params.append('videoCategoryId', categoryId);
        }
        const url = `https://www.googleapis.com/youtube/v3/videos?${params}`;
        const response = await this.makeRequest(url);
        return response.items?.map((item) => ({
            id: item.id,
            title: item.snippet.title,
            description: item.snippet.description,
            channelTitle: item.snippet.channelTitle,
            channelId: item.snippet.channelId,
            publishedAt: item.snippet.publishedAt,
            categoryId: item.snippet.categoryId,
            duration: item.contentDetails?.duration || 'PT0S',
            viewCount: parseInt(item.statistics?.viewCount || '0'),
            likeCount: parseInt(item.statistics?.likeCount || '0'),
            commentCount: parseInt(item.statistics?.commentCount || '0'),
            thumbnails: item.snippet.thumbnails
        })) || [];
    }
    async getVideoCategories() {
        const params = new URLSearchParams({
            part: 'snippet',
            regionCode: 'US'
        });
        const url = `https://www.googleapis.com/youtube/v3/videoCategories?${params}`;
        const response = await this.makeRequest(url);
        return response.items?.map((item) => ({
            id: item.id,
            title: item.snippet.title
        })) || [];
    }
    async testConnection() {
        try {
            await this.getVideoCategories();
            console.log('‚úÖ YouTube API connection test successful');
            return true;
        }
        catch (error) {
            console.error('‚ùå YouTube API connection test failed:', error);
            return false;
        }
    }
    getQuotaUsage() {
        return {
            used: this.quotaUsed,
            limit: 10000,
            remaining: 10000 - this.quotaUsed
        };
    }
}
exports.YouTubeApiClientSimple = YouTubeApiClientSimple;
//# sourceMappingURL=data:application/json;base64,