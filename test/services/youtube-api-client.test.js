"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const youtube_api_client_1 = require("../../src/services/youtube-api-client");
// Mock AWS SDK
jest.mock('@aws-sdk/client-secrets-manager');
jest.mock('node-fetch');
describe('YouTubeApiClient', () => {
    let client;
    let mockSecretsClient;
    beforeEach(() => {
        const { SecretsManagerClient } = require('@aws-sdk/client-secrets-manager');
        mockSecretsClient = {
            send: jest.fn()
        };
        SecretsManagerClient.mockImplementation(() => mockSecretsClient);
        client = new youtube_api_client_1.YouTubeApiClient({
            secretName: 'test-secret',
            region: 'us-east-1'
        });
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('initialization', () => {
        it('should create client with default config', () => {
            expect(client).toBeInstanceOf(youtube_api_client_1.YouTubeApiClient);
        });
        it('should handle quota tracking', () => {
            const quota = client.getQuotaUsage();
            expect(quota.used).toBe(0);
            expect(quota.limit).toBe(10000);
            expect(quota.remaining).toBe(10000);
        });
    });
    describe('credential management', () => {
        it('should handle missing credentials gracefully', async () => {
            mockSecretsClient.send.mockRejectedValue(new Error('Secret not found'));
            await expect(client.initialize()).rejects.toThrow('Failed to load YouTube credentials');
        });
        it('should handle invalid secret format', async () => {
            mockSecretsClient.send.mockResolvedValue({
                SecretString: null
            });
            await expect(client.initialize()).rejects.toThrow('Failed to load YouTube credentials');
        });
    });
    describe('API methods', () => {
        it('should have all required API methods', () => {
            expect(typeof client.searchVideos).toBe('function');
            expect(typeof client.getVideoDetails).toBe('function');
            expect(typeof client.getTrendingVideos).toBe('function');
            expect(typeof client.uploadVideo).toBe('function');
            expect(typeof client.getVideoCategories).toBe('function');
            expect(typeof client.testConnection).toBe('function');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW91dHViZS1hcGktY2xpZW50LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ5b3V0dWJlLWFwaS1jbGllbnQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhFQUF5RTtBQUV6RSxlQUFlO0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFeEIsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxJQUFJLE1BQXdCLENBQUM7SUFDN0IsSUFBSSxpQkFBc0IsQ0FBQztJQUUzQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDNUUsaUJBQWlCLEdBQUc7WUFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztRQUNGLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFakUsTUFBTSxHQUFHLElBQUkscUNBQWdCLENBQUM7WUFDNUIsVUFBVSxFQUFFLGFBQWE7WUFDekIsTUFBTSxFQUFFLFdBQVc7U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMscUNBQWdCLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM1RCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBRXhFLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3ZDLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztZQUVILE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUMxRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDM0IsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkQsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWW91VHViZUFwaUNsaWVudCB9IGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy95b3V0dWJlLWFwaS1jbGllbnQnO1xyXG5cclxuLy8gTW9jayBBV1MgU0RLXHJcbmplc3QubW9jaygnQGF3cy1zZGsvY2xpZW50LXNlY3JldHMtbWFuYWdlcicpO1xyXG5qZXN0Lm1vY2soJ25vZGUtZmV0Y2gnKTtcclxuXHJcbmRlc2NyaWJlKCdZb3VUdWJlQXBpQ2xpZW50JywgKCkgPT4ge1xyXG4gIGxldCBjbGllbnQ6IFlvdVR1YmVBcGlDbGllbnQ7XHJcbiAgbGV0IG1vY2tTZWNyZXRzQ2xpZW50OiBhbnk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgY29uc3QgeyBTZWNyZXRzTWFuYWdlckNsaWVudCB9ID0gcmVxdWlyZSgnQGF3cy1zZGsvY2xpZW50LXNlY3JldHMtbWFuYWdlcicpO1xyXG4gICAgbW9ja1NlY3JldHNDbGllbnQgPSB7XHJcbiAgICAgIHNlbmQ6IGplc3QuZm4oKVxyXG4gICAgfTtcclxuICAgIFNlY3JldHNNYW5hZ2VyQ2xpZW50Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrU2VjcmV0c0NsaWVudCk7XHJcblxyXG4gICAgY2xpZW50ID0gbmV3IFlvdVR1YmVBcGlDbGllbnQoe1xyXG4gICAgICBzZWNyZXROYW1lOiAndGVzdC1zZWNyZXQnLFxyXG4gICAgICByZWdpb246ICd1cy1lYXN0LTEnXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnaW5pdGlhbGl6YXRpb24nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBjbGllbnQgd2l0aCBkZWZhdWx0IGNvbmZpZycsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGNsaWVudCkudG9CZUluc3RhbmNlT2YoWW91VHViZUFwaUNsaWVudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBxdW90YSB0cmFja2luZycsICgpID0+IHtcclxuICAgICAgY29uc3QgcXVvdGEgPSBjbGllbnQuZ2V0UXVvdGFVc2FnZSgpO1xyXG4gICAgICBleHBlY3QocXVvdGEudXNlZCkudG9CZSgwKTtcclxuICAgICAgZXhwZWN0KHF1b3RhLmxpbWl0KS50b0JlKDEwMDAwKTtcclxuICAgICAgZXhwZWN0KHF1b3RhLnJlbWFpbmluZykudG9CZSgxMDAwMCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NyZWRlbnRpYWwgbWFuYWdlbWVudCcsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3NpbmcgY3JlZGVudGlhbHMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgICAgbW9ja1NlY3JldHNDbGllbnQuc2VuZC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1NlY3JldCBub3QgZm91bmQnKSk7XHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCBleHBlY3QoY2xpZW50LmluaXRpYWxpemUoKSkucmVqZWN0cy50b1Rocm93KCdGYWlsZWQgdG8gbG9hZCBZb3VUdWJlIGNyZWRlbnRpYWxzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIHNlY3JldCBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIG1vY2tTZWNyZXRzQ2xpZW50LnNlbmQubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICAgIFNlY3JldFN0cmluZzogbnVsbFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGF3YWl0IGV4cGVjdChjbGllbnQuaW5pdGlhbGl6ZSgpKS5yZWplY3RzLnRvVGhyb3coJ0ZhaWxlZCB0byBsb2FkIFlvdVR1YmUgY3JlZGVudGlhbHMnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQVBJIG1ldGhvZHMnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGhhdmUgYWxsIHJlcXVpcmVkIEFQSSBtZXRob2RzJywgKCkgPT4ge1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5zZWFyY2hWaWRlb3MpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2xpZW50LmdldFZpZGVvRGV0YWlscykudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBjbGllbnQuZ2V0VHJlbmRpbmdWaWRlb3MpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2xpZW50LnVwbG9hZFZpZGVvKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNsaWVudC5nZXRWaWRlb0NhdGVnb3JpZXMpLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdCh0eXBlb2YgY2xpZW50LnRlc3RDb25uZWN0aW9uKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pOyJdfQ==